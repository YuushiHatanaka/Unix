//==============================================================================
// SQLite3クラスヘッダ
//==============================================================================
#ifndef _SQLITE3_CLASS_H_                   // 二重インクルード防止
#define _SQLITE3_CLASS_H_                   // 二重インクルード防止

//==============================================================================
// インクルードファイル
//==============================================================================
#include "Object.h"
#include "Exception.h"
#include "RegularExpression.h"

#include <sqlite3.h>

//==============================================================================
// クラス定義
//==============================================================================
//------------------------------------------------------------------------------
// SQLite3例外クラス
//------------------------------------------------------------------------------
class SQLite3Exception : public Exception
{
public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    SQLite3Exception(std::string format, ...)
        : Exception()
    {
        // メッセージ生成
        va_list ap;
        va_start(ap, format);
        this->SetMessage(format, ap);
        va_end(ap);
    };
};

//------------------------------------------------------------------------------
// SQLite3クラス
//------------------------------------------------------------------------------
class SQLite3 : public Object
{
private:
    sqlite3* m_connection;                  // SQLite3接続子

public:
    //-------------------------------------------------------------------------
    // コンストラクタ
    //-------------------------------------------------------------------------
    SQLite3() : Object()
    {
        // 初期化
        this->m_connection = NULL;
    }

    //-------------------------------------------------------------------------
    // コンストラクタ
    //-------------------------------------------------------------------------
    SQLite3(const SQLite3& obj) : Object()
    {
        // コピー
        this->m_connection = obj.m_connection;
    }

    //-------------------------------------------------------------------------
    // デストラクタ
    //-------------------------------------------------------------------------
    ~SQLite3()
    {
        // データベースクローズ
        this->Close();
    }

    //--------------------------------------------------------------------------
    // エラーメッセージ文字列化
    //--------------------------------------------------------------------------
    std::string ToErrMsg()
    {
        std::stringstream _toErrMsg;        // 文字列化オブジェクト

        // 文字列化
        _toErrMsg << sqlite3_errmsg(this->m_connection);

        // 文字列を返却
        return _toErrMsg.str();
    }

    //-------------------------------------------------------------------------
    // Config
    //-------------------------------------------------------------------------
    bool Config(int config)
    {
        // sqlite3_config
        if(sqlite3_config(config) != SQLITE_OK)
        {
            // 異常終了
            return false;
        }

        // 正常終了
        return true;
    }

    //-------------------------------------------------------------------------
    // Open
    //-------------------------------------------------------------------------
    bool Open(std::string fileName)
    {
        // sqlite3_open
        if(sqlite3_open(fileName.c_str(), &(this->m_connection)) != SQLITE_OK)
        {
            // 異常終了
            return false;
        }

        // 正常終了
        return true;
    }

    //-------------------------------------------------------------------------
    // Close
    //-------------------------------------------------------------------------
    bool Close()
    {
        // データベース接続子判定
        if(this->m_connection == NULL)
        {
            // 正常終了
            return true;
        }

        // sqlite3_close
        if(sqlite3_close(this->m_connection) != SQLITE_OK)
        {
            // 異常終了
            return false;
        }

        // データベース接続子初期化
        this->m_connection = NULL;

        // 正常終了
        return true;
    }
};
#endif                                      // 二重インクルード防止
