//==============================================================================
// Mutexクラスヘッダ
//==============================================================================
#ifndef _MUTEX_H_                           // 二重インクルード防止
#define _MUTEX_H_                           // 二重インクルード防止

//==============================================================================
// インクルードファイル
//==============================================================================
#include "Exception.h"
#include <pthread.h>
#include <errno.h>

//==============================================================================
// クラス定義
//==============================================================================
//------------------------------------------------------------------------------
// Mutex例外クラス
//------------------------------------------------------------------------------
class MutexException : public Exception
{
public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    MutexException(std::string msg) : Exception(msg)
    {
    };
};

//------------------------------------------------------------------------------
// Mutexクラス
//------------------------------------------------------------------------------
class Mutex
{
private:
    pthread_mutex_t m_mutex;                // mutexオブジェクト
    int m_errno;                            // エラー番号

public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    Mutex()
    {
        // 初期化
        pthread_mutex_init(&(this->m_mutex), NULL);
        this->m_errno = 0;
    }

    //--------------------------------------------------------------------------
    // コピーコンストラクタ
    //--------------------------------------------------------------------------
    Mutex(Mutex& mutex)
    {
        // コピー
        this->m_mutex = mutex.m_mutex;
        this->m_errno = mutex.m_errno;
    }

    //--------------------------------------------------------------------------
    // デストラクタ
    //--------------------------------------------------------------------------
    virtual ~Mutex()
    {
        // 破棄
        pthread_mutex_destroy(&(this->m_mutex));
    }

    //--------------------------------------------------------------------------
    // 排他設定
    //--------------------------------------------------------------------------
    bool Lock()
    {
        // mutex設定
        if(pthread_mutex_lock(&(this->m_mutex)) != 0)
        {
            // エラー番号設定
            this->m_errno = errno;

            // 異常終了
            return false;
        }

        // 正常終了
        return true;
    }

    //--------------------------------------------------------------------------
    // 排他確認
    //--------------------------------------------------------------------------
    bool IsLock()
    {
        // mutex設定
        if(pthread_mutex_trylock(&(this->m_mutex)) != 0)
        {
            // ロック中
            return true;
        }

        // ロック解除中
        return false;
    }

    //--------------------------------------------------------------------------
    // 排他解除
    //--------------------------------------------------------------------------
    bool Unlock()
    {
        // mutex解除
        if(pthread_mutex_unlock(&(this->m_mutex)) != 0)
        {
            // エラー番号設定
            this->m_errno = errno;

            // 異常終了
            return false;
        }

        // 正常終了
        return true;
    }
};
#endif                                      // 二重インクルード防止
