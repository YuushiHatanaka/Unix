//==============================================================================
// Fileクラスヘッダ
//==============================================================================
#ifndef _FILE_H_                            // 二重インクルード防止
#define _FILE_H_                            // 二重インクルード防止

//==============================================================================
// インクルードファイル
//==============================================================================
#include "Exception.h"
#include <sys/stat.h>
#include<iostream>
#include<fstream>

//==============================================================================
// クラス定義
//==============================================================================
//------------------------------------------------------------------------------
// File例外クラス
//------------------------------------------------------------------------------
class FileException : public Exception
{
public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    FileException(std::string format, ...)
        : Exception()
    {
        // メッセージ生成
        va_list ap;
        va_start(ap, format);
        this->SetMessage(format, ap);
        va_end(ap);
    };
};

//------------------------------------------------------------------------------
// Fileクラス
//------------------------------------------------------------------------------
class File
{
protected :
    std::string m_name;                     // ファイル名

public:
    //-----------------------------------------------------------------------------
    // コンストラクタ
    //-----------------------------------------------------------------------------
    File(std::string filename)
    {
        // 初期化
        this->m_name = filename;
    }

    //-----------------------------------------------------------------------------
    // コピーコンストラクタ
    //-----------------------------------------------------------------------------
    File(File& file)
    {
        // 初期化
        this->m_name = file.m_name;
    }

    //-------------------------------------------------------------------------
    // 情報取得
    //-------------------------------------------------------------------------
    bool Stat(struct stat& file_stat)
    {
        // ファイル情報取得
        if(stat(this->m_name.c_str(),&file_stat) != 0)
        {
            // 異常終了
            return false;
        }

        // 正常終了
        return true;
    }

    //-------------------------------------------------------------------------
    // サイズ取得
    //-------------------------------------------------------------------------
    long Size()
    {
        struct stat _stat;                  // ファイル情報

        // ファイル情報取得
        if((!this->Stat(_stat)))
        {
            // 異常終了
            return -1;
        }

        // 正常終了
        return _stat.st_size;
    }

    //-------------------------------------------------------------------------
    // ファイル存在判定関数
    //-------------------------------------------------------------------------
    bool Exist()
    {
        struct stat _stat;                  // ファイル情報

        // ファイル情報取得
        if(this->Stat(_stat))
        {
            // ファイルは存在していない
            return false;
        }

        // ファイルは存在している
        return true;
    }

    //-------------------------------------------------------------------------
    // コピー
    //-------------------------------------------------------------------------
    bool Copy(std::string dst_file_path)
    {
        // 入力ファイルを開く
        std::fstream ifs;
        ifs.open( this->m_name.c_str(), std::ios::in|std::ios::binary);
        if( !ifs.is_open() )
        {
            // 異常終了
            return false;
        }

        // 出力ファイルを開く
        std::fstream ofs;
        ofs.open( dst_file_path.c_str(), std::ios::out|std::ios::binary);
        if( !ofs.is_open() )
        {
            // 異常終了
            return false;
        }

        // 読込バッファ
        char _read_buffer[4096];

        // 入力ファイル読込を繰り返す
        while( !ifs.eof() )
        {
            // 入力ファイルを読み込む
            ifs.read(_read_buffer, sizeof(_read_buffer) );

            // 読込失敗したら終了
            if( ifs.fail() && !ifs.eof() )
            {
                // ファイルクローズ
                ifs.close();
                ofs.close();

                // 異常終了
                return false;
            }

            // ファイルに書き込む
            ofs.write(_read_buffer, ifs.gcount());
        }

        // ファイルクローズ
        ifs.close();
        ofs.close();

        // 正常終了
        return true;
    }

    //-------------------------------------------------------------------------
    // 権限付与関数
    //-------------------------------------------------------------------------
    bool ChangeMode(mode_t mode)
    {
        // 権限付与
        if(chmod(this->m_name.c_str(),mode) != 0)
        {
            // 異常終了
            return false;
        }

        // 正常終了
        return true;
    }
};
#endif                                      // 二重インクルード防止
