//==============================================================================
// Condクラスヘッダ
//==============================================================================
#ifndef _COND_H_                            // 二重インクルード防止
#define _COND_H_                            // 二重インクルード防止

//==============================================================================
// インクルードファイル
//==============================================================================
#include "Mutex.h"

//==============================================================================
// クラス定義
//==============================================================================
//------------------------------------------------------------------------------
// Cond例外クラス
//------------------------------------------------------------------------------
class CondException : public Exception
{
public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    CondException(std::string format, ...)
        : Exception()
    {
        // メッセージ生成
        va_list ap;
        va_start(ap, format);
        this->SetMessage(format, ap);
        va_end(ap);
    };
};

//------------------------------------------------------------------------------
// Condクラス
//------------------------------------------------------------------------------
class Cond : public Mutex
{
private:
    pthread_cond_t  m_cond;                 // condオブジェクト

public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    Cond() : Mutex()
    {
        // 初期化
        pthread_cond_init(&(this->m_cond), NULL);
    }

    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    Cond(const Cond& cond) : Mutex(cond)
    {
        // コピー
        this->m_cond = cond.m_cond;
    }

    //--------------------------------------------------------------------------
    // デストラクタ
    //--------------------------------------------------------------------------
    virtual ~Cond()
    {
        // 破棄
        pthread_cond_destroy(&(this->m_cond));
    }

    //--------------------------------------------------------------------------
    // Signal
    //--------------------------------------------------------------------------
    bool Signal()
    {
        // signal
        int _result = pthread_cond_signal(&(this->m_cond));
        if(_result != 0)
        {
            // エラー番号設定
            this->SetErrno(_result);

            // 異常終了
            return false;
        }

        // 正常終了
        return true;
    }

    //--------------------------------------------------------------------------
    // Broadcast
    //--------------------------------------------------------------------------
    bool Broadcast()
    {
        // broadcast設定
        int _result = pthread_cond_broadcast(&(this->m_cond));
        if(_result != 0)
        {
            // エラー番号設定
            this->SetErrno(_result);

            // 異常終了
            return false;
        }

        // 正常終了
        return true;
    }

    //--------------------------------------------------------------------------
    // Wait
    //--------------------------------------------------------------------------
    bool Wait()
    {
        // wait設定
        int _result = pthread_cond_wait(&(this->m_cond), &(this->m_mutex));
        if(_result != 0)
        {
            // エラー番号設定
            this->SetErrno(_result);

            // 異常終了
            return false;
        }

        // 正常終了
        return true;
    }

    //--------------------------------------------------------------------------
    // Timedwait
    //--------------------------------------------------------------------------
    bool Timedwait(long msec)
    {
        struct timespec _msec;

        // ミリ秒変換
        _msec.tv_sec = time(NULL) + (msec / 1000);
        _msec.tv_nsec = (msec % 1000) * 1000;

        // 正常終了
        return this->Timedwait(&_msec);
    }

    //--------------------------------------------------------------------------
    // Timedwait
    //--------------------------------------------------------------------------
    bool Timedwait(const struct timespec* abstime)
    {
        // wait設定
        int _result = pthread_cond_timedwait(&(this->m_cond), &(this->m_mutex), abstime);
        if(_result != 0)
        {
            // エラー番号設定
            this->SetErrno(_result);

            // 異常終了
            return false;
        }

        // 正常終了
        return true;
    }
};
#endif                                      // 二重インクルード防止
