//==============================================================================
// TimerThreadクラスヘッダ
//==============================================================================
#ifndef _TIMER_THREAD_H_                    // 二重インクルード防止
#define _TIMER_THREAD_H_                    // 二重インクルード防止

//==============================================================================
// インクルードファイル
//==============================================================================
#include "Thread.h"
#include <list>

//==============================================================================
// 型定義
//==============================================================================
typedef void (*TimeOutEvent)(void*);        // イベントコールバック関数

//==============================================================================
// クラス定義
//==============================================================================
//------------------------------------------------------------------------------
// TimerThreadクラス
//------------------------------------------------------------------------------
class TimerThread : public Thread
{
private:
    uint64_t m_timer;                       // T.O.タイマー(msec)
    std::list<TimeOutEvent> m_OnTimeOut;    // タイムアウトイベントリスト

private:
    //--------------------------------------------------------------------------
    // 実行
    //--------------------------------------------------------------------------
    virtual void Execute()
    {
        // 無限ループ
        while(true)
        {
            // キャンセルポイント設定
            pthread_testcancel();

            // 周期動作のためsleep(msec)
            usleep(this->m_timer * 1000);

            // イベント呼出し
            this->Event();

            // スレッド終了
            pthread_exit(this);
        }
    }

    //--------------------------------------------------------------------------
    // クリーンナップ
    //--------------------------------------------------------------------------
    virtual void Cleanup()
    {
    }

public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    TimerThread(std::string name, uint64_t timer) : Thread(name)
    {
        // 初期化
        this->m_timer = timer;
    }

    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    TimerThread(std::string name, pthread_attr_t attr, uint64_t timer) : Thread(name, attr)
    {
        // 初期化
        this->m_timer = timer;
    }

    //--------------------------------------------------------------------------
    // コピーコンストラクタ
    //--------------------------------------------------------------------------
    TimerThread(TimerThread& thread) : Thread(thread)
    {
        // 初期設定
        this->m_timer = thread.m_timer;
        this->m_OnTimeOut = thread.m_OnTimeOut;
    }

    //--------------------------------------------------------------------------
    // デストラクタ
    //--------------------------------------------------------------------------
    virtual ~TimerThread()
    {
        // クリア
        this->m_OnTimeOut.clear();
    }

    //--------------------------------------------------------------------------
    // イベント
    //--------------------------------------------------------------------------
    virtual void Event()
    {
        // 登録イベントハンドラ分繰り返す
        for(std::list<TimeOutEvent>::iterator _itr=this->m_OnTimeOut.begin(); _itr!=this->m_OnTimeOut.end(); ++_itr)
        {
            // イベントハンドラ呼出し
            TimeOutEvent _event = *_itr;
            _event(this);
        }
    }

    //--------------------------------------------------------------------------
    // タイムアウトイベント追加
    //--------------------------------------------------------------------------
    void AddTimeOutEvent(TimeOutEvent event)
    {
        // リストに追加
        this->m_OnTimeOut.push_back(event);
    }

    //--------------------------------------------------------------------------
    // タイムアウトイベント削除
    //--------------------------------------------------------------------------
    void RemoveTimeOutEvent(TimeOutEvent event)
    {
        // 登録イベントハンドラ分繰り返す
        for(std::list<TimeOutEvent>::iterator _itr=this->m_OnTimeOut.begin(); _itr!=this->m_OnTimeOut.end(); ++_itr)
        {
            // イベント一致判定
            if(*_itr == event)
            {
                // 要素削除
                this->m_OnTimeOut.erase(_itr);

                // 処理終了
                break;
            }
        }
    }
};
#endif                                      // 二重インクルード防止
