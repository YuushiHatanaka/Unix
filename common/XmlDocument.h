//==============================================================================
// XmlDocumentクラスヘッダ
//==============================================================================
#ifndef _XMLDOCUMENT_H_                     // 二重インクルード防止
#define _XMLDOCUMENT_H_                     // 二重インクルード防止

//==============================================================================
// インクルードファイル
//==============================================================================
#include <string>
#include <vector>
#include <list>

#include <expat.h>

//==============================================================================
// クラス定義
//==============================================================================
//
// 概要:
//     ノードの型を指定します。
class XmlNodeType
{
public:
    // これによって返されますが、 System.Xml.XmlReader 場合、 Read メソッドが呼び出されていません。
    static const int None = 0;
    // 要素 (たとえば、 <item> )。
    static const int Element = 1;
    // 属性 (たとえば、 id='123' )。
    static const int Attribute = 2;
    // ノードのテキストの内容。
    static const int Text = 3;
    // CDATA セクション (たとえば、 <![CDATA[my escaped text]]> )。
    static const int CDATA = 4;
    // エンティティへの参照 (たとえば、 &num; )。
    static const int EntityReference = 5;
    // エンティティ宣言 (たとえば、 <!ENTITY...> )。
    static const int Entity = 6;
    // 処理命令 (たとえば、 <?pi test?> )。
    static const int ProcessingInstruction = 7;
    // コメント (たとえば、 <!-- my comment --> )。
    static const int Comment = 8;
    // ドキュメント ツリーのルートとして XML ドキュメント全体へのアクセスを提供するドキュメント オブジェクト。
    static const int Document = 9;
    // 次のタグを使用して、ドキュメント型宣言が示されます (たとえば、 <!DOCTYPE...> )。
    static const int DocumentType = 10;
    // ドキュメントの一部です。
    static const int DocumentFragment = 11;
    // ドキュメント型宣言での表記 (たとえば、 <!NOTATION...> )。
    static const int Notation = 12;
    // マークアップ間の空白。
    static const int Whitespace = 13;
    // 混合コンテンツ モデル内の空白のマークアップ間の空白、 xml:space="preserve" スコープ。
    static const int SignificantWhitespace = 14;
    // 終了要素タグ (たとえば、 </item> )。
    static const int EndElement = 15;
    // ときに返される XmlReader 後は、置換する呼び出しの結果としてエンティティの末尾に System.Xml.XmlReader.ResolveEntityします。
    static const int EndEntity = 16;
    // XML 宣言 (たとえば、 <?xml version='1.0'?> )。
    static const int XmlDeclaration = 17;
};

//------------------------------------------------------------------------------
// XmlNodeクラス
//------------------------------------------------------------------------------
class XmlNode
{
public:

public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlNode()
    {
    }

    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlNode(const XmlNode& xmlNode)
    {
    }

    //--------------------------------------------------------------------------
    // デストラクタ
    //--------------------------------------------------------------------------
    ~XmlNode()
    {
    }
};

//------------------------------------------------------------------------------
// XmlNodeListクラス
//------------------------------------------------------------------------------
class XmlNodeList : private std::list<XmlNode>
{
public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlNodeList()
    {
    }

    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlNodeList(const XmlNodeList& xmlNodeList)
    {
    }

    //--------------------------------------------------------------------------
    // デストラクタ
    //--------------------------------------------------------------------------
    ~XmlNodeList()
    {
    }
};

//------------------------------------------------------------------------------
// XmlAttributeクラス
//------------------------------------------------------------------------------
class XmlAttribute
{
public:
    // 名前
    std::string Name;
    // 値
    std::string Value;

public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlAttribute()
    {
    }

    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlAttribute(const XmlAttribute& xmlAttribute)
    {
        // コピー
        this->Name = xmlAttribute.Name;
        this->Value = xmlAttribute.Value;
    }

    //--------------------------------------------------------------------------
    // デストラクタ
    //--------------------------------------------------------------------------
    ~XmlAttribute()
    {
    }
};

//------------------------------------------------------------------------------
// XmlAttributeCollectionクラス
//------------------------------------------------------------------------------
class XmlAttributeCollection : private std::vector<XmlAttribute>
{
private:
    // iterator定義
    typedef typename XmlAttributeCollection::iterator Iterator;
public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlAttributeCollection()
    {
    }

    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlAttributeCollection(const XmlAttributeCollection& xmlAttributeCollection)
    {
    }

    //--------------------------------------------------------------------------
    // デストラクタ
    //--------------------------------------------------------------------------
    ~XmlAttributeCollection()
    {
    }

    //--------------------------------------------------------------------------
    // ノード数取得
    //--------------------------------------------------------------------------
    size_t GetCount()
    {
        return this->size();
    }

    //--------------------------------------------------------------------------
    // operator
    //--------------------------------------------------------------------------
    XmlAttribute& operator [] (size_t i)
    {
        size_t index;
        for(Iterator itr=this->begin(); itr!=this->end(); ++itr)
        {
            if(i==index)
            {
                return *itr;
            }
            index++;
        }

        // 最後のノードを返却する
        return *(XmlAttributeCollection::end());
    }

    //--------------------------------------------------------------------------
    // 子ノード追加
    //--------------------------------------------------------------------------
    XmlAttribute& Append(XmlAttribute xmlAttribute)
    {
        // ノードを追加する
        this->push_back(xmlAttribute);

        // 最後のノードを返却する
        return *(XmlAttributeCollection::end());
    }
};

//------------------------------------------------------------------------------
// XmlDocumentTypeクラス
//------------------------------------------------------------------------------
class XmlDocumentType
{
public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlDocumentType()
    {
    }

    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlDocumentType(const XmlDocumentType& xmlDocumentType)
    {
    }

    //--------------------------------------------------------------------------
    // デストラクタ
    //--------------------------------------------------------------------------
    ~XmlDocumentType()
    {
    }
};

//------------------------------------------------------------------------------
// XmlElementクラス
//------------------------------------------------------------------------------
class XmlElement
{
public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlElement()
    {
    }

    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlElement(const XmlElement& xmlElement)
    {
    }

    //--------------------------------------------------------------------------
    // デストラクタ
    //--------------------------------------------------------------------------
    ~XmlElement()
    {
    }
};

//------------------------------------------------------------------------------
// XmlLinkedNodeクラス
//------------------------------------------------------------------------------
class XmlLinkedNode : public XmlNode
{
public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlLinkedNode()
    {
    }

    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlLinkedNode(const XmlLinkedNode& xmlLinkedNode)
    {
    }

    //--------------------------------------------------------------------------
    // デストラクタ
    //--------------------------------------------------------------------------
    ~XmlLinkedNode()
    {
    }
};

//------------------------------------------------------------------------------
// XmlDocumentクラス
//------------------------------------------------------------------------------
class XmlDocument : public XmlLinkedNode
{
private:
    // XmlDocumentTypeクラスオブジェクト
    XmlDocumentType m_xmlDocumentType;

    // XmlElementクラスオブジェクト
    XmlElement m_xmlElement;

    // XmlAttributeCollectionクラスオブジェクト
    XmlAttributeCollection m_xmlAttributeCollection;

    // XmlNodeListクラスオブジェクト
    XmlNodeList m_xmlNodeList;

public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlDocument()
    {
    }

    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    XmlDocument(const XmlDocument& xmlDocument)
    {
    }

    //--------------------------------------------------------------------------
    // デストラクタ
    //--------------------------------------------------------------------------
    ~XmlDocument()
    {
    }

    //--------------------------------------------------------------------------
    // DOCTYPE宣言取得
    //--------------------------------------------------------------------------
    XmlDocumentType& GetDocumentType()
    {
        return this->m_xmlDocumentType;
    }

    //--------------------------------------------------------------------------
    // ルートElement取得
    //--------------------------------------------------------------------------
    XmlElement& GetDocumentElement()
    {
        return this->m_xmlElement;
    }

    //--------------------------------------------------------------------------
    // 属性取得
    //--------------------------------------------------------------------------
    XmlAttributeCollection& GetAttributes()
    {
        return this->m_xmlAttributeCollection;
    }

    //--------------------------------------------------------------------------
    // 子ノードリスト取得
    //--------------------------------------------------------------------------
    XmlNodeList& GetChildNodes()
    {
        return this->m_xmlNodeList;
    }

    //--------------------------------------------------------------------------
    // 子ノード存在
    //--------------------------------------------------------------------------
    bool HasChildNodes()
    {
        // TODO:未実装
        return false;
    }

    //--------------------------------------------------------------------------
    // 先頭子ノード取得
    //--------------------------------------------------------------------------
    XmlNode GetFirstChild()
    {
        // TODO:未実装
        XmlNode _result;
        return _result;
    }

    //--------------------------------------------------------------------------
    // 最終子ノード取得
    //--------------------------------------------------------------------------
    XmlNode GetLastChild()
    {
        // TODO:未実装
        XmlNode _result;
        return _result;
    }

    //--------------------------------------------------------------------------
    // 読込
    //--------------------------------------------------------------------------
    void Load(std::string fileName)
    {
    }
};
#endif                                      // 二重インクルード防止
