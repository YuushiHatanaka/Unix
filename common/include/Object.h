//==============================================================================
// Objectクラスヘッダ
//==============================================================================
#ifndef _OBJECT_H_                          // 二重インクルード防止
#define _OBJECT_H_                          // 二重インクルード防止

//==============================================================================
// インクルードファイル
//==============================================================================
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <string>
#include <cstring>
#include <sstream>
#include <stdint.h>
#include <iomanip>

//==============================================================================
// 定数定義
//==============================================================================
#define DUMP_STRING_WIDHT (16)              // ダンプ文字列長

//==============================================================================
// クラス定義
//==============================================================================
//------------------------------------------------------------------------------
// Objectクラス
//------------------------------------------------------------------------------
class Object
{
protected:
    int m_errno;                            // エラー番号
    std::stringstream m_ErrorMsg;           // 文字列化オブジェクト

protected:
    //-----------------------------------------------------------------------------
    // ダンプ文字列取得
    //-----------------------------------------------------------------------------
    virtual std::string ToDump(u_char* data, size_t size, int offset)
    {
        std::stringstream _dumpmsg; // ダンプメッセージ

        // NULL判定
        if(data == NULL)
        {
            return "";
        }

        // ログ内容
        const unsigned char* p = (const unsigned char*)(data);
        size_t bytes = size;
        char text[DUMP_STRING_WIDHT+1];
        unsigned i = 0;
        unsigned _addrress;
        unsigned int _data;

        while (i < bytes)
        {
            // アドレス出力
            if ((i % DUMP_STRING_WIDHT) == 0)
            {
                _addrress = (uintptr_t)p;
                for(int i=0; i<offset; i++)
                {
                    _dumpmsg << " ";
                }
                _dumpmsg << "0x" << std::hex << std::setw(8) << std::right << std::setfill('0') <<  _addrress << ": ";
                memset(text, '\0', sizeof(text));
            }
            _data = (unsigned int)*p;
            _dumpmsg << std::hex << std::setw(2) << std::right << std::setfill('0') << _data << " ";

            // テキスト部分出力
            text[i % DUMP_STRING_WIDHT] = isprint(*p) ? *p : '.';
            p++;
            i++;

            // テキスト部分出力
            if ((i % DUMP_STRING_WIDHT) == 0)
            {
                _dumpmsg << ": " << text << std::endl;
            }
        }
        if ((i % DUMP_STRING_WIDHT) != 0)
        {
            _dumpmsg << std::setw((DUMP_STRING_WIDHT - (i % DUMP_STRING_WIDHT)) * 3 + 2) << std::setfill(' ');
            _dumpmsg << ": " << text;
        }

        // 文字列返却
        return _dumpmsg.str();
    }

public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    Object()
    {
        // 初期化
        this->m_errno = 0;
    }

    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    Object(const Object& obj)
    {
        // コピー
        this->m_errno = obj.m_errno;
    }

    //--------------------------------------------------------------------------
    // デストラクタ
    //--------------------------------------------------------------------------
    virtual ~Object()
    {
    }

    //--------------------------------------------------------------------------
    // ハッシュコード取得
    //--------------------------------------------------------------------------
    uint64_t GetHashCode()
    {
        std::stringstream _HashCode;        // ハッシュコード変換用stringstream

        // TODO:自身のアドレスをHASHコードにする(暫定)
        _HashCode << this;

        // ハッシュコードを返却
        return (uint64_t)strtol(_HashCode.str().c_str(), NULL, 16);
    }

    //--------------------------------------------------------------------------
    // 一致判定
    //--------------------------------------------------------------------------
    bool Equals(Object& object)
    {
        // ハッシュコードを比較
        if(this->GetHashCode() == object.GetHashCode())
        {
            // 一致
            return true;
        }

        // 不一致
        return false;
    }

    //--------------------------------------------------------------------------
    // エラー番号リセット
    //--------------------------------------------------------------------------
    void ResetErrno()
    {
        this->m_errno = 0;
    }

    //--------------------------------------------------------------------------
    // エラー番号取得
    //--------------------------------------------------------------------------
    int GetErrno()
    {
        return this->m_errno;
    }

    //--------------------------------------------------------------------------
    // エラー番号設定
    //--------------------------------------------------------------------------
    void SetErrno()
    {
        // エラー番号設定
        this->SetErrno(errno);
    }

    //--------------------------------------------------------------------------
    // エラー番号設定
    //--------------------------------------------------------------------------
    void SetErrno(int no)
    {
        char _buf[4096+1];                  // 文字列化バッファ

        // エラー番号設定
        this->m_errno = no;

        // 初期化
        memset(_buf, 0x00, sizeof(_buf));

        // 文字列化
        this->m_ErrorMsg << strerror_r(this->m_errno, _buf, sizeof(_buf));
    }

    //--------------------------------------------------------------------------
    // エラーメッセージ設定
    //--------------------------------------------------------------------------
    void SetErrorMsg(const char* format, ...)
    {
        // メッセージ生成
        va_list ap;
        va_start(ap, format);

        // メッセージ生成
        char _buffer[4096+1];
        memset( _buffer, 0x00, sizeof(_buffer) );
        vsnprintf(_buffer, sizeof(_buffer), format, ap);
        va_end(ap);

        // 文字列化
        this->m_ErrorMsg << _buffer;
    }

    //--------------------------------------------------------------------------
    // エラーメッセージ文字列取得
    //--------------------------------------------------------------------------
    std::string GetErrorMsg()
    {
        // 文字列を返却
        return this->m_ErrorMsg.str();
    }

    //--------------------------------------------------------------------------
    // 文字列化
    //--------------------------------------------------------------------------
    virtual std::string ToString()
    {
        std::stringstream _toString;        // 文字列化オブジェクト

        // 自身のアドレスを文字列化
        _toString  << "0x" << std::hex << std::setw(8) << std::setfill('0') << this;

        // 文字列を返却
        return _toString.str();
    }
};
#endif                                      // 二重インクルード防止
