//==============================================================================
// NotifyThreadクラスヘッダ
//==============================================================================
#ifndef _NOTIFY_THREAD_H_                   // 二重インクルード防止
#define _NOTIFY_THREAD_H_                   // 二重インクルード防止

//==============================================================================
// インクルードファイル
//==============================================================================
#include "Thread.h"
#include "Cond.h"
#include <queue>

//==============================================================================
// クラス定義
//==============================================================================
//------------------------------------------------------------------------------
// NotifyThread例外クラス
//------------------------------------------------------------------------------
class NotifyThreadException : public Exception
{
public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    NotifyThreadException(std::string format, ...)
        : Exception()
    {
        // メッセージ生成
        va_list ap;
        va_start(ap, format);
        this->SetMessage(format, ap);
        va_end(ap);
    };

};

//------------------------------------------------------------------------------
// NotifyThreadクラス
//------------------------------------------------------------------------------
template <class T>
class NotifyThread : public Thread
{
private:
    std::queue<T> m_NotifyQueue;            // 通知キュー

private:
    //--------------------------------------------------------------------------
    // 実行
    //--------------------------------------------------------------------------
    virtual void Execute()
    {
        // 無限ループ
        while(true)
        {
            // ロック設定
            if(!this->m_NotifyCond->Lock())
            {
                // TODO:ロック設定異常
            }

            // 通知受信待ち
            if(!this->m_NotifyCond->Wait())
            {
                // 通知待ち異常
                continue;
            }

            // ロック解除
            if(!this->m_NotifyCond->Unlock())
            {
                // TODO:ロック解除異常
            }
        }
    }

    //--------------------------------------------------------------------------
    // クリーンナップ
    //--------------------------------------------------------------------------
    virtual void Cleanup()
    {
    }

protected:
    Cond* m_NotifyCond;                     // 通知受信用

protected:
    //--------------------------------------------------------------------------
    // 通知取得
    // ※通知キューから削除
    //--------------------------------------------------------------------------
    T PopNotify()
    {
        T _Notify = this->m_NotifyQueue.front();
        this->m_NotifyQueue.pop();
        return _Notify;
    }

public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    NotifyThread() : Thread()
    {
        // 初期化
        this->m_NotifyCond = new Cond();
    }

    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    NotifyThread(const NotifyThread& thread) : Thread(thread)
    {
        // 初期化
        this->m_NotifyCond = thread.m_NotifyCond;
    }

    //--------------------------------------------------------------------------
    // デストラクタ
    //--------------------------------------------------------------------------
    virtual ~NotifyThread()
    {
        // 破棄
        delete this->m_NotifyCond;
    }

    //--------------------------------------------------------------------------
    // 通知数取得
    //--------------------------------------------------------------------------
    uint64_t NotifyCont()
    {
        return this->m_NotifyQueue.size();
    }

    //--------------------------------------------------------------------------
    // 通知
    //--------------------------------------------------------------------------
    virtual bool Notify(T data)
    {
        // ロック設定
        if(!this->m_NotifyCond->Lock())
        {
            // 異常終了
            return false;
        }

        // キュー登録
        this->m_NotifyQueue.push(data);

        // ロック解除
        if(!this->m_NotifyCond->Unlock())
        {
            // 異常終了
            return false;
        }

        // 通知
        if(!this->m_NotifyCond->Signal())
        {
            // 異常終了
            return false;
        }

        // 正常終了
        return true;
    }
};
#endif                                      // 二重インクルード防止
