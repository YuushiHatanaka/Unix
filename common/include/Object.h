//==============================================================================
// Objectクラスヘッダ
//==============================================================================
#ifndef _OBJECT_H_                          // 二重インクルード防止
#define _OBJECT_H_                          // 二重インクルード防止

//==============================================================================
// インクルードファイル
//==============================================================================
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <string>
#include <sstream>
#include <stdint.h>
#include <iomanip>

//==============================================================================
// クラス定義
//==============================================================================
//------------------------------------------------------------------------------
// Objectクラス
//------------------------------------------------------------------------------
class Object
{
protected:
    int m_errno;                            // エラー番号

public:
    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    Object()
    {
        // 初期化
        this->m_errno = 0;
    }

    //--------------------------------------------------------------------------
    // コンストラクタ
    //--------------------------------------------------------------------------
    Object(const Object& obj)
    {
        // コピー
        this->m_errno = obj.m_errno;
    }

    //--------------------------------------------------------------------------
    // デストラクタ
    //--------------------------------------------------------------------------
    virtual ~Object()
    {
    }

    //--------------------------------------------------------------------------
    // ハッシュコード取得
    //--------------------------------------------------------------------------
    uint64_t GetHashCode()
    {
        std::stringstream _HashCode;        // ハッシュコード変換用stringstream

        // TODO:自身のアドレスをHASHコードにする(暫定)
        _HashCode << this;

        // ハッシュコードを返却
        return (uint64_t)strtol(_HashCode.str().c_str(), NULL, 16);
    }

    //--------------------------------------------------------------------------
    // 一致判定
    //--------------------------------------------------------------------------
    bool Equals(Object& object)
    {
        // ハッシュコードを比較
        if(this->GetHashCode() == object.GetHashCode())
        {
            // 一致
            return true;
        }

        // 不一致
        return false;
    }

    //--------------------------------------------------------------------------
    // エラー番号リセット
    //--------------------------------------------------------------------------
    void ResetErrno()
    {
        this->m_errno = 0;
    }

    //--------------------------------------------------------------------------
    // エラー番号取得
    //--------------------------------------------------------------------------
    int GetErrno()
    {
        return this->m_errno;
    }

    //--------------------------------------------------------------------------
    // エラー番号設定
    //--------------------------------------------------------------------------
    void SetErrno()
    {
        this->SetErrno(errno);
    }

    //--------------------------------------------------------------------------
    // エラー番号設定
    //--------------------------------------------------------------------------
    void SetErrno(int no)
    {
        this->m_errno = no;
    }

    //--------------------------------------------------------------------------
    // エラーメッセージ文字列化
    //--------------------------------------------------------------------------
    virtual std::string ToErrMsg()
    {
        std::stringstream _toErrMsg;        // 文字列化オブジェクト
        char _buf[4096+1];                  // 文字列化バッファ

        // 初期化
        memset(_buf, 0x00, sizeof(_buf));

        // 文字列化
        _toErrMsg << strerror_r(this->m_errno, _buf, sizeof(_buf));

        // 文字列を返却
        return _toErrMsg.str();
    }

    //--------------------------------------------------------------------------
    // 文字列化
    //--------------------------------------------------------------------------
    virtual std::string ToString()
    {
        std::stringstream _toString;        // 文字列化オブジェクト

        // 自身のアドレスを文字列化
        _toString  << "0x" << std::hex << std::setw(8) << std::setfill('0') << this;

        // 文字列を返却
        return _toString.str();
    }
};
#endif                                      // 二重インクルード防止
